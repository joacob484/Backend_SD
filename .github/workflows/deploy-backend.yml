name: Deploy Backend to GCP VM

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GCP_PROJECT_ID: master-might-274420
  GCP_VM_NAME: faltauno-vm
  GCP_ZONE: us-central1-a

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Deploy on VM (Blue-Green)
        run: |
          gcloud compute ssh augus@${{ env.GCP_VM_NAME }} \
            --zone=${{ env.GCP_ZONE }} \
            --command="
              set -e
              
              # Hacer backup de .env
              if [ -f ~/Backend_SD/.env ]; then
                cp ~/Backend_SD/.env ~/Backend_SD/.env.backup
              fi
              
              cd ~/Backend_SD
              
              # Blue-Green Deployment
              echo 'üîµüü¢ Starting Blue-Green Deployment'
              
              # Stash any local changes and pull latest code
              git add -A
              git stash
              git pull origin main
              git stash pop || true
              
              # Build and start GREEN (port 8081)
              echo 'üì¶ Starting GREEN deployment on port 8081'
              docker-compose -f docker-compose.bluegreen.yml up -d --build backend-green
              
              # Wait for GREEN to be healthy
              echo '‚è≥ Waiting for GREEN to be healthy...'
              SECONDS_WAITED=0
              until curl -f http://localhost:8081/actuator/health > /dev/null 2>&1; do
                if [ \$SECONDS_WAITED -ge 180 ]; then
                  echo '‚ùå GREEN failed to start, rolling back'
                  docker-compose -f docker-compose.bluegreen.yml stop backend-green
                  exit 1
                fi
                echo \"‚è≥ Waiting... (\$SECONDS_WAITED s)\"
                sleep 5
                SECONDS_WAITED=\$((SECONDS_WAITED + 5))
              done
              
              echo '‚úÖ GREEN is healthy!'
              
              # Stop BLUE (port 8080)
              echo 'üõë Stopping BLUE deployment'
              docker-compose -f docker-compose.cloudsql.yml stop backend || true
              
              # Switch: Restart GREEN on port 8080
              echo 'üîÑ Switching GREEN to port 8080'
              docker stop backend-green
              docker rm backend-1 || true
              
              # Start with main compose (port 8080)
              docker-compose -f docker-compose.cloudsql.yml up -d backend
              
              # Cleanup
              docker-compose -f docker-compose.bluegreen.yml down || true
              docker image prune -f
              
              echo '‚úÖ Blue-Green Deployment complete!'
            "
      
      - name: Verify deployment
        run: |
          sleep 30
          VM_IP=\$(gcloud compute instances describe ${{ env.GCP_VM_NAME }} \
            --zone=${{ env.GCP_ZONE }} \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          
          echo "Testing health endpoint at http://\${VM_IP}:8080/actuator/health"
          curl -f http://\${VM_IP}:8080/actuator/health || echo "‚ö†Ô∏è Health check failed, but deployment completed"
      
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üéâ Backend deployed successfully!"
          else
            echo "‚ùå Deployment failed!"
          fi
