name: Deploy to Google Cloud Run

permissions:
  contents: read
  issues: write

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest

    env:
      GCP_PROJECT_ID: master-might-274420
      CP_REGION: us-central1
      AR_REPO: faltauno
      CLOUD_RUN_SERVICE: faltauno-backend
      CLOUDSQL_INSTANCE: master-might-274420:us-central1:faltauno-db
      VPC_CONNECTOR: run-vpc
      RUNTIME_SA: 169771742214-compute@developer.gserviceaccount.com
      FRONTEND_URL: https://faltauno-frontend-169771742214.us-central1.run.app
      SPRING_DATASOURCE_USERNAME: app
      SPRING_DATASOURCE_URL: jdbc:postgresql:///faltauno_db?cloudSqlInstance=master-might-274420:us-central1:faltauno-db&socketFactory=com.google.cloud.sql.postgres.SocketFactory
      SPRING_REDIS_HOST: 10.128.0.2
      SPRING_RABBITMQ_HOST: 10.128.0.2
      POSTGRES_HOST: postgres
      IMAGE: "us-central1-docker.pkg.dev/master-might-274420/faltauno/faltauno-backend:${{ github.sha }}"
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Authenticate with Google Cloud (Workload Identity)
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: 'projects/169771742214/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
        service_account: 'deploy-cicd@master-might-274420.iam.gserviceaccount.com'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v3
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Authenticate Docker with Artifact Registry
      run: |
        gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

    - name: Start Cloud Build (async)
      run: |
        echo "Submitting Cloud Build (async) â€” build will run in Cloud Build and deploy per cloudbuild-cloudrun.yaml"
        # Submit Cloud Build asynchronously. Provide explicit substitutions the cloudbuild file expects.
        BUILD_ID=$(gcloud builds submit --config=cloudbuild-cloudrun.yaml \
          --substitutions=_SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}",_REDIS_HOST="${{ env.SPRING_REDIS_HOST }}",_POSTGRES_HOST="${{ env.POSTGRES_HOST }}",_CLOUDSQL_INSTANCE="${{ env.CLOUDSQL_INSTANCE }}",_SPRING_DATASOURCE_URL="${{ env.SPRING_DATASOURCE_URL }}" \
          --async --format='value(id)')
        echo "Started Cloud Build ID: $BUILD_ID"
        echo "To follow logs: gcloud builds log $BUILD_ID --project=${{ env.GCP_PROJECT_ID }}"

    - name: Notify on Failure (create issue)
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          // Create an issue in the repo with the failure details so you can track it
          const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
          github.rest.issues.create({
            owner: owner,
            repo: repo,
            title: `Deployment failed: ${github.context.sha}`,
            body: `Deployment failed for commit ${github.context.sha}. Check the Actions logs: ${process.env.GITHUB_SERVER_URL}/${owner}/${repo}/actions/runs/${process.env.GITHUB_RUN_ID}`
          });
