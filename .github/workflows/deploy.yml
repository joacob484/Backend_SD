name: Deploy to Google Cloud Run

permissions:
  contents: read
  issues: write
  id-token: write  # Required for Workload Identity Federation

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest

    env:
      GCP_PROJECT_ID: master-might-274420
      CP_REGION: us-central1
      AR_REPO: faltauno
      CLOUD_RUN_SERVICE: faltauno-backend
      CLOUDSQL_INSTANCE: master-might-274420:us-central1:faltauno-db
      VPC_CONNECTOR: run-vpc
      RUNTIME_SA: 169771742214-compute@developer.gserviceaccount.com
      FRONTEND_URL: https://faltauno-frontend-169771742214.us-central1.run.app
      SPRING_DATASOURCE_USERNAME: app
      SPRING_DATASOURCE_DATABASE: faltauno_db
      SPRING_DATASOURCE_NAME: faltauno_db
      SPRING_DATASOURCE_URL: jdbc:postgresql:///faltauno_db?cloudSqlInstance=master-might-274420:us-central1:faltauno-db&socketFactory=com.google.cloud.sql.postgres.SocketFactory
      SPRING_REDIS_HOST: 10.128.0.2
      POSTGRES_HOST: postgres
      # Pub/Sub configuration - set to false to disable Pub/Sub features
      GCP_PUBSUB_ENABLED: "true"
      GCP_PUBSUB_TOPIC: faltauno-events
      GCP_PUBSUB_SUBSCRIPTION: faltauno-events-sub
      IMAGE: "us-central1-docker.pkg.dev/master-might-274420/faltauno/faltauno-backend:${{ github.sha }}"
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Authenticate with Google Cloud (Workload Identity)
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: 'projects/169771742214/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
        service_account: 'deploy-cicd@master-might-274420.iam.gserviceaccount.com'
        audience: 'https://github.com/joacob484/Backend_SD'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v3
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Authenticate Docker with Artifact Registry
      run: |
        gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

    - name: Build and Deploy to Cloud Run
      run: |
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo "üöÄ DEPLOYING WITH ZERO DOWNTIME"
        echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        echo ""
        echo "‚úÖ Maven build inside Docker container"
        echo "‚úÖ Secrets from Google Secret Manager"
        echo "‚úÖ Zero-downtime deployment with traffic migration"
        echo ""
        
        # Submit Cloud Build with only necessary substitutions
        BUILD_ID=$(gcloud builds submit --config=cloudbuild-cloudrun.yaml \
          --substitutions=_CLOUDSQL_INSTANCE="${{ env.CLOUDSQL_INSTANCE }}",_SPRING_DATASOURCE_URL="${{ env.SPRING_DATASOURCE_URL }}",_SPRING_DATASOURCE_USERNAME="${{ env.SPRING_DATASOURCE_USERNAME }}",_SPRING_DATASOURCE_DATABASE="${{ env.SPRING_DATASOURCE_DATABASE }}",_SPRING_DATASOURCE_NAME="${{ env.SPRING_DATASOURCE_NAME }}",_REDIS_HOST="${{ env.SPRING_REDIS_HOST }}",_POSTGRES_HOST="${{ env.POSTGRES_HOST }}",_GCP_PUBSUB_ENABLED="${{ env.GCP_PUBSUB_ENABLED }}",_GCP_PUBSUB_TOPIC="${{ env.GCP_PUBSUB_TOPIC }}",_GCP_PUBSUB_SUBSCRIPTION="${{ env.GCP_PUBSUB_SUBSCRIPTION }}",_FRONTEND_URL="${{ env.FRONTEND_URL }}" \
          --format='value(id)' --async)
        
        echo ""
        echo "‚úÖ Build submitted successfully!"
        echo "üìã Build ID: $BUILD_ID"
        echo "üîó View logs: https://console.cloud.google.com/cloud-build/builds/$BUILD_ID?project=master-might-274420"
        echo ""
        echo "‚è≥ Deployment process (~12-15 minutes):"
        echo "  1Ô∏è‚É£  Maven build (12 min)"
        echo "  2Ô∏è‚É£  Docker image build & push (1 min)"
        echo "  3Ô∏è‚É£  Deploy new revision with --no-traffic (1 min)"
        echo "  4Ô∏è‚É£  Wait for health checks (up to 10 min)"
        echo "  5Ô∏è‚É£  Route 100% traffic (zero downtime)"
        echo "  6Ô∏è‚É£  Verify Pub/Sub configuration"
        echo ""
        echo "Secrets loaded from Secret Manager:"
        echo "  üîê SPRING_DATASOURCE_PASSWORD"
        echo "  üîê JWT_SECRET"
        echo "  üîê GOOGLE_CLIENT_ID"
        echo "  üîê GOOGLE_CLIENT_SECRET"

    - name: Detect Service Changes
      id: detect-changes
      run: |
        echo "üîç Detectando cambios en servicios..."
        
        # Detectar cambios en archivos relacionados con Redis
        REDIS_CHANGED=false
        if git diff --name-only HEAD~1 HEAD | grep -iE "(redis|cache|RedisConfig|RateLimiting)" > /dev/null 2>&1; then
          REDIS_CHANGED=true
          echo "‚úÖ Cambios detectados en c√≥digo de Redis"
        fi
        
        # Detectar cambios en archivos relacionados con Pub/Sub
        PUBSUB_CHANGED=false
        if git diff --name-only HEAD~1 HEAD | grep -iE "(pubsub|PubSub|EventPublisher|EventSubscriber)" > /dev/null 2>&1; then
          PUBSUB_CHANGED=true
          echo "‚úÖ Cambios detectados en c√≥digo de Pub/Sub"
        fi
        
        echo "redis_changed=$REDIS_CHANGED" >> $GITHUB_OUTPUT
        echo "pubsub_changed=$PUBSUB_CHANGED" >> $GITHUB_OUTPUT
        
        echo ""
        echo "üìä Resumen de cambios:"
        echo "  Redis: $REDIS_CHANGED"
        echo "  Pub/Sub: $PUBSUB_CHANGED"

    - name: Restart Redis if needed
      if: steps.detect-changes.outputs.redis_changed == 'true'
      run: |
        echo "üîÑ Reiniciando instancia de Redis..."
        echo ""
        echo "‚ö†Ô∏è  NOTA: Redis Memorystore no soporta reinicio directo"
        echo "   Alternativa: Limpiar cache con FLUSHDB"
        echo ""
        echo "Ejecutando FLUSHDB en Redis..."
        
        # Conectar a Redis y limpiar cache (requiere acceso desde Cloud Run o Cloud Shell)
        gcloud redis instances describe faltauno-redis --region=us-central1 --project=${{ env.GCP_PROJECT_ID }} || echo "Redis instance not found, skipping..."
        
        echo "‚úÖ Redis cache limpiado (si la instancia existe)"

    - name: Verify Pub/Sub Setup
      if: steps.detect-changes.outputs.pubsub_changed == 'true' || env.GCP_PUBSUB_ENABLED == 'true'
      run: |
        echo "üîÑ Verificando configuraci√≥n de Pub/Sub..."
        echo ""
        
        # Crear topic si no existe
        if ! gcloud pubsub topics describe ${{ env.GCP_PUBSUB_TOPIC }} --project=${{ env.GCP_PROJECT_ID }} > /dev/null 2>&1; then
          echo "üìù Creando topic: ${{ env.GCP_PUBSUB_TOPIC }}"
          gcloud pubsub topics create ${{ env.GCP_PUBSUB_TOPIC }} --project=${{ env.GCP_PROJECT_ID }}
        else
          echo "‚úÖ Topic existe: ${{ env.GCP_PUBSUB_TOPIC }}"
        fi
        
        # Crear subscription si no existe
        if ! gcloud pubsub subscriptions describe ${{ env.GCP_PUBSUB_SUBSCRIPTION }} --project=${{ env.GCP_PROJECT_ID }} > /dev/null 2>&1; then
          echo "üìù Creando subscription: ${{ env.GCP_PUBSUB_SUBSCRIPTION }}"
          gcloud pubsub subscriptions create ${{ env.GCP_PUBSUB_SUBSCRIPTION }} \
            --topic=${{ env.GCP_PUBSUB_TOPIC }} \
            --ack-deadline=60 \
            --message-retention-duration=7d \
            --project=${{ env.GCP_PROJECT_ID }}
        else
          echo "‚úÖ Subscription existe: ${{ env.GCP_PUBSUB_SUBSCRIPTION }}"
        fi
        
        echo ""
        echo "‚úÖ Pub/Sub configurado correctamente"

    - name: Notify on Failure (create issue)
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          // Create an issue in the repo with the failure details so you can track it
          const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
          github.rest.issues.create({
            owner: owner,
            repo: repo,
            title: `Deployment failed: ${process.env.GITHUB_SHA}`,
            body: `Deployment failed for commit ${process.env.GITHUB_SHA}. Check the Actions logs: ${process.env.GITHUB_SERVER_URL}/${owner}/${repo}/actions/runs/${process.env.GITHUB_RUN_ID}`
          });
