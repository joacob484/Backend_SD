name: Deploy Backend (Cloud Run + VM)

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  id-token: write

env:
  # ====== GCP ======
  PROJECT_ID: master-might-274420
  REGION: us-central1
  AR_REPO: faltauno
  RUN_SERVICE: faltauno-backend
  CLOUDSQL_INSTANCE: master-might-274420:us-central1:faltauno-db
  VPC_CONNECTOR: run-vpc

  # ====== VM ======
  VM_NAME: faltauno-vm
  VM_ZONE: us-central1-a

  # ====== App ======
  FRONTEND_URL: https://faltauno-frontend-169771742214.us-central1.run.app
  REDIS_HOST: 10.128.0.2
  RABBIT_HOST: 10.128.0.2

  # Imagen base (Artifact Registry)
  IMG_BASENAME: us-central1-docker.pkg.dev/master-might-274420/faltauno/faltauno-backend

  # Cloud Run runtime
  MIN_INSTANCES: "1"
  MAX_INSTANCES: "10"
  CPU: "1"
  MEMORY: "512Mi"
  TIMEOUT: "300"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # --- Checkout ---
      - name: Checkout
        uses: actions/checkout@v4

      # --- Java para compilar ---
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: "maven"

      - name: Build (Maven)
        run: |
          mvn -v
          mvn -B -DskipTests package

      # --- Auth OIDC (Workload Identity Federation) ---
      - name: Auth to Google Cloud (WIF)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/169771742214/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: deploy-cicd@master-might-274420.iam.gserviceaccount.com
          project_id: ${{ env.PROJECT_ID }}
          audience: https://github.com/joacob484/Backend_SD  # ðŸ‘ˆ FIX clave
          create_credentials_file: true

      # --- Exportar credenciales para gcloud ---
      - name: Export ADC env vars
        run: |
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ steps.auth.outputs.credentials_file_path }}" >> $GITHUB_ENV
          echo "CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE=${{ steps.auth.outputs.credentials_file_path }}" >> $GITHUB_ENV

      # --- Instalar gcloud SDK + componente beta ---
      - name: Set up gcloud SDK (with beta)
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'beta'

      # --- Docker login a Artifact Registry ---
      - name: Configure Docker to Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev -q

      # --- Build & Push imagen ---
      - name: Build & Push image
        run: |
          GIT_SHA="${{ github.sha }}"
          IMG_SHA="${{ env.IMG_BASENAME }}:${GIT_SHA}"
          IMG_LATEST="${{ env.IMG_BASENAME }}:latest"

          echo "Building image $IMG_SHA"
          docker build \
            -f Dockerfile.prod \
            -t "$IMG_SHA" \
            -t "$IMG_LATEST" \
            .

          docker push "$IMG_SHA"
          docker push "$IMG_LATEST"

          echo "IMG_SHA=$IMG_SHA" >> $GITHUB_ENV

      # --- Deploy sin downtime a Cloud Run ---
      - name: Deploy to Cloud Run (zero-downtime)
        run: |
          gcloud run deploy "$RUN_SERVICE" \
            --image "$IMG_SHA" \
            --region "$REGION" \
            --project "$PROJECT_ID" \
            --platform managed \
            --allow-unauthenticated \
            --execution-environment gen2 \
            --min-instances "$MIN_INSTANCES" \
            --max-instances "$MAX_INSTANCES" \
            --cpu "$CPU" \
            --memory "$MEMORY" \
            --timeout "$TIMEOUT" \
            --vpc-connector "$VPC_CONNECTOR" \
            --vpc-egress private-ranges-only \
            \
            --set-env-vars SPRING_PROFILES_ACTIVE=prod \
            --set-env-vars FRONTEND_URL="${FRONTEND_URL}" \
            --set-env-vars SPRING_DATASOURCE_URL="jdbc:postgresql:///faltauno_db?cloudSqlInstance=${CLOUDSQL_INSTANCE}&socketFactory=com.google.cloud.sql.postgres.SocketFactory" \
            --set-env-vars SPRING_DATASOURCE_USERNAME=app \
            --set-env-vars SPRING_REDIS_HOST="${REDIS_HOST}" \
            --set-env-vars SPRING_RABBITMQ_HOST="${RABBIT_HOST}" \
            --set-env-vars SPRING_RABBITMQ_PORT=5672 \
            --set-env-vars SPRING_RABBITMQ_USERNAME=faltauno \
            --set-env-vars APP_RABBIT_ENABLED=true \
            --set-env-vars JWT_EXPIRATION=86400000 \
            \
            --set-secrets SPRING_DATASOURCE_PASSWORD=db-password:latest \
            --set-secrets JWT_SECRET=jwt-secret:latest \
            --set-secrets GOOGLE_CLIENT_ID=google-client-id:latest \
            --set-secrets GOOGLE_CLIENT_SECRET=google-client-secret:latest \
            --set-secrets SPRING_RABBITMQ_PASSWORD=rabbitmq-password:latest

      # --- Reiniciar servicios en la VM (Redis/Rabbit) ---
      - name: Refresh infra on VM (Redis/Rabbit via systemd)
        run: |
          for i in 1 2; do
            set +e
            gcloud beta compute ssh "$VM_NAME" \
              --zone "$VM_ZONE" \
              --tunnel-through-iap \
              --project "$PROJECT_ID" \
              --quiet \
              -- -o StrictHostKeyChecking=no \
              "sudo systemctl daemon-reload && sudo systemctl restart faltauno-services && sudo systemctl --no-pager --full status faltauno-services"
            rc=$?
            set -e
            if [ $rc -eq 0 ]; then
              echo 'VM refresh OK'
              break
            fi
            echo 'Retrying VM refresh in 10s...'
            sleep 10
          done

      # --- Mostrar info del deploy ---
      - name: Show Cloud Run URL & revision
        run: |
          URL=$(gcloud run services describe "$RUN_SERVICE" --region "$REGION" --format='value(status.url)')
          REV=$(gcloud run services describe "$RUN_SERVICE" --region "$REGION" --format='value(status.latestCreatedRevisionName)')
          echo "âœ… Service URL: $URL"
          echo "âœ… Latest Revision: $REV"

      # --- Chequeo rÃ¡pido de puertos en VM ---
      - name: Quick VM port checks
        continue-on-error: true
        run: |
          gcloud beta compute ssh "$VM_NAME" \
            --zone "$VM_ZONE" --tunnel-through-iap --project "$PROJECT_ID" --quiet \
            -- -o StrictHostKeyChecking=no \
            "sudo ss -lntp | egrep 'LISTEN.+:(6379|5672|15672)' || true"