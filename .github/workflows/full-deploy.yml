name: Full Stack Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GCP_PROJECT_ID: master-might-274420
  GCP_VM_NAME: faltauno-vm
  GCP_ZONE: us-central1-a
  GCP_REGION: us-central1
  FRONTEND_SERVICE: faltauno-frontend

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Deploy Backend to VM
        run: |
          echo "üì¶ Deploying backend..."
          
          # Copiar archivos
          gcloud compute scp --recurse \
            Back/Backend_SD/ \
            ${{ env.GCP_VM_NAME }}:~/Backend_SD_new/ \
            --zone=${{ env.GCP_ZONE }}
          
          # Desplegar
          gcloud compute ssh ${{ env.GCP_VM_NAME }} \
            --zone=${{ env.GCP_ZONE }} \
            --command="
              if [ -f ~/Backend_SD/.env ]; then
                cp ~/Backend_SD/.env ~/Backend_SD_new/.env
              fi
              rm -rf ~/Backend_SD
              mv ~/Backend_SD_new ~/Backend_SD
              cd ~/Backend_SD
              docker-compose -f docker-compose.prod.yml build
              docker-compose -f docker-compose.prod.yml up -d
              docker image prune -f
            "
          
          echo "‚úÖ Backend deployed"
  
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Deploy Frontend to Cloud Run
        run: |
          echo "üé® Deploying frontend..."
          
          cd Front/FaltaUnoFront
          
          gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
            --source . \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --memory 256Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --port 3000 \
            --project ${{ env.GCP_PROJECT_ID }}
          
          URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --format 'value(status.url)')
          
          echo "‚úÖ Frontend deployed at: $URL"
  
  verify:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Verify deployments
        run: |
          # Backend health check
          VM_IP=$(gcloud compute instances describe ${{ env.GCP_VM_NAME }} \
            --zone=${{ env.GCP_ZONE }} \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          
          echo "Testing backend at http://${VM_IP}:8080/actuator/health"
          sleep 30
          curl -f http://${VM_IP}:8080/actuator/health || echo "‚ö†Ô∏è Backend health check failed"
          
          # Frontend health check
          FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --format 'value(status.url)')
          
          echo "Testing frontend at ${FRONTEND_URL}/api/health"
          curl -f ${FRONTEND_URL}/api/health || echo "‚ö†Ô∏è Frontend health check failed"
          
          echo "üéâ Deployment verification complete!"
          echo "Backend: http://${VM_IP}:8080"
          echo "Frontend: ${FRONTEND_URL}"
