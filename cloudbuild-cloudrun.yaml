steps:
  # ═══════════════════════════════════════════════════════════
  # STEP 1: BUILD DOCKER IMAGE - SIN CACHE
  # ═══════════════════════════════════════════════════════════
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args: 
      - 'build'
      - '--no-cache'
      - '--progress=plain'
      - '-t'
      - 'gcr.io/$PROJECT_ID/faltauno-backend:$BUILD_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/faltauno-backend:latest'
      - '-f'
      - 'Dockerfile.cloudrun'
      - '.'
    timeout: '1200s'  # 20 minutes para build completo

  # ═══════════════════════════════════════════════════════════
  # STEP 2: VERIFICAR QUE EL JAR EXISTE EN LA IMAGEN
  # ═══════════════════════════════════════════════════════════
  - name: 'gcr.io/cloud-builders/docker'
    id: 'verify-jar'
    args:
      - 'run'
      - '--rm'
      - '--entrypoint=sh'
      - 'gcr.io/$PROJECT_ID/faltauno-backend:$BUILD_ID'
      - '-c'
      - 'ls -lah /app/app.jar && echo "JAR size:" && du -h /app/app.jar && echo "First 20 classes in JAR:" && jar tf /app/app.jar | grep "\.class$" | head -20'
    waitFor: ['build-image']

  # ═══════════════════════════════════════════════════════════
  # STEP 3: PUSH IMAGE TO REGISTRY
  # ═══════════════════════════════════════════════════════════
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image'
    args: 
      - 'push'
      - '--all-tags'
      - 'gcr.io/$PROJECT_ID/faltauno-backend'
    waitFor: ['verify-jar']

  # ═══════════════════════════════════════════════════════════
  # STEP 4: DEPLOY TO CLOUD RUN WITH ZERO DOWNTIME
  # ═══════════════════════════════════════════════════════════
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-cloudrun'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        
        echo "=========================================="
        echo "🚀 DEPLOYING TO CLOUD RUN"
        echo "=========================================="
        echo ""
        echo "Build ID: $BUILD_ID"
        echo "Image: gcr.io/$PROJECT_ID/faltauno-backend:$BUILD_ID"
        echo ""
        
        # Check if service exists
        if gcloud run services describe faltauno-backend \
          --region=us-central1 \
          --project=$PROJECT_ID \
          --format='value(metadata.name)' 2>/dev/null; then
          
          echo "✅ Service exists - deploying new revision with --no-traffic"
          echo ""
          
          # Deploy new revision WITHOUT traffic (zero downtime)
          NEW_REVISION=$$(gcloud run deploy faltauno-backend \
            --image=gcr.io/$PROJECT_ID/faltauno-backend:$BUILD_ID \
            --region=us-central1 \
            --platform=managed \
            --no-traffic \
            --timeout=600 \
            --memory=2Gi \
            --cpu=2 \
            --min-instances=0 \
            --max-instances=10 \
            --add-cloudsql-instances="${_CLOUDSQL_INSTANCE}" \
            --set-env-vars="SERVER_PORT=8080" \
            --set-env-vars="SPRING_DATASOURCE_URL=${_SPRING_DATASOURCE_URL}" \
            --set-env-vars="SPRING_DATASOURCE_USERNAME=${_SPRING_DATASOURCE_USERNAME}" \
            --set-env-vars="SPRING_REDIS_HOST=${_REDIS_HOST}" \
            --set-env-vars="GCP_PUBSUB_ENABLED=${_GCP_PUBSUB_ENABLED}" \
            --set-env-vars="GCP_PUBSUB_TOPIC=${_GCP_PUBSUB_TOPIC}" \
            --set-env-vars="GCP_PUBSUB_SUBSCRIPTION=${_GCP_PUBSUB_SUBSCRIPTION}" \
            --set-env-vars="GCP_PROJECT_ID=$PROJECT_ID" \
            --set-env-vars="FRONTEND_URL=${_FRONTEND_URL}" \
            --update-secrets="SPRING_DATASOURCE_PASSWORD=db-password:latest" \
            --update-secrets="JWT_SECRET=jwt-secret:latest" \
            --update-secrets="GOOGLE_CLIENT_ID=google-client-id:latest" \
            --update-secrets="GOOGLE_CLIENT_SECRET=google-client-secret:latest" \
            --service-account=169771742214-compute@developer.gserviceaccount.com \
            --allow-unauthenticated \
            --format='value(status.latestCreatedRevisionName)')
          
          echo ""
          echo "✅ New revision created: $$NEW_REVISION"
          echo ""
          echo "⏳ Waiting for revision to be ready..."
          
          # Wait for revision to be ready (max 5 minutes)
          for i in {1..60}; do
            READY=$$(gcloud run revisions describe "$$NEW_REVISION" \
              --region=us-central1 \
              --platform=managed \
              --format='value(status.conditions[?(@.type=="Ready")].status)' 2>/dev/null || echo "Unknown")
            
            echo "[$$i/60] Revision status: $$READY"
            
            if [ "$$READY" = "True" ]; then
              echo ""
              echo "✅ Revision is READY!"
              break
            fi
            
            if [ "$$i" -eq 60 ]; then
              echo ""
              echo "❌ Revision did not become ready after 5 minutes"
              gcloud run revisions describe "$$NEW_REVISION" --region=us-central1 --platform=managed
              exit 1
            fi
            
            sleep 5
          done
          
          echo ""
          echo "🔄 Routing 100% traffic to new revision (zero downtime cutover)..."
          
          gcloud run services update-traffic faltauno-backend \
            --to-revisions="$$NEW_REVISION=100" \
            --region=us-central1 \
            --platform=managed
          
          echo ""
          echo "✅ Traffic routed successfully!"
          echo ""
          
        else
          echo "⚠️  Service doesn't exist - creating new service"
          echo ""
          
          # Initial deployment (will receive traffic immediately)
          gcloud run deploy faltauno-backend \
            --image=gcr.io/$PROJECT_ID/faltauno-backend:$BUILD_ID \
            --region=us-central1 \
            --platform=managed \
            --timeout=600 \
            --memory=2Gi \
            --cpu=2 \
            --min-instances=0 \
            --max-instances=10 \
            --add-cloudsql-instances="${_CLOUDSQL_INSTANCE}" \
            --set-env-vars="SERVER_PORT=8080" \
            --set-env-vars="SPRING_DATASOURCE_URL=${_SPRING_DATASOURCE_URL}" \
            --set-env-vars="SPRING_DATASOURCE_USERNAME=${_SPRING_DATASOURCE_USERNAME}" \
            --set-env-vars="SPRING_REDIS_HOST=${_REDIS_HOST}" \
            --set-env-vars="GCP_PUBSUB_ENABLED=${_GCP_PUBSUB_ENABLED}" \
            --set-env-vars="GCP_PUBSUB_TOPIC=${_GCP_PUBSUB_TOPIC}" \
            --set-env-vars="GCP_PUBSUB_SUBSCRIPTION=${_GCP_PUBSUB_SUBSCRIPTION}" \
            --set-env-vars="GCP_PROJECT_ID=$PROJECT_ID" \
            --set-env-vars="FRONTEND_URL=${_FRONTEND_URL}" \
            --update-secrets="SPRING_DATASOURCE_PASSWORD=db-password:latest" \
            --update-secrets="JWT_SECRET=jwt-secret:latest" \
            --update-secrets="GOOGLE_CLIENT_ID=google-client-id:latest" \
            --update-secrets="GOOGLE_CLIENT_SECRET=google-client-secret:latest" \
            --service-account=169771742214-compute@developer.gserviceaccount.com \
            --allow-unauthenticated
          
          echo ""
          echo "✅ Service created successfully!"
        fi
        
        echo ""
        echo "=========================================="
        echo "✅ DEPLOYMENT COMPLETED SUCCESSFULLY"
        echo "=========================================="
        echo ""
        
        # Get service URL
        SERVICE_URL=$$(gcloud run services describe faltauno-backend \
          --region=us-central1 \
          --platform=managed \
          --format='value(status.url)')
        
        echo "🌐 Service URL: $$SERVICE_URL"
        echo "🏥 Health Check: $$SERVICE_URL/actuator/health"
        echo ""
    waitFor: ['push-image']
    timeout: '900s'

# ═══════════════════════════════════════════════════════════
# TIMEOUT GLOBAL Y OPCIONES
# ═══════════════════════════════════════════════════════════
timeout: '2400s'  # 40 minutes total

options:
  machineType: 'E2_HIGHCPU_8'  # 8 vCPUs para build más rápido
  logging: CLOUD_LOGGING_ONLY
  logStreamingOption: STREAM_ON

images:
  - 'gcr.io/$PROJECT_ID/faltauno-backend:$BUILD_ID'

substitutions:
  _REDIS_HOST: "10.128.0.2"
  _CLOUDSQL_INSTANCE: "master-might-274420:us-central1:faltauno-db"
  _SPRING_DATASOURCE_USERNAME: "app"
  _SPRING_DATASOURCE_URL: "jdbc:postgresql:///faltauno_db?cloudSqlInstance=master-might-274420:us-central1:faltauno-db&socketFactory=com.google.cloud.sql.postgres.SocketFactory"
  _GCP_PUBSUB_ENABLED: "false"
  _GCP_PUBSUB_TOPIC: "faltauno-events"
  _GCP_PUBSUB_SUBSCRIPTION: "faltauno-events-sub"
  _FRONTEND_URL: "https://faltauno-frontend-169771742214.us-central1.run.app"
