spring:
  application:
    name: falta-uno-backend

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/faltauno_db}
    username: ${SPRING_DATASOURCE_USERNAME:app}
    password: ${SPRING_DATASOURCE_PASSWORD:pass}
    driver-class-name: org.postgresql.Driver

    # ✅ Pool Hikari (estable)
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      auto-commit: true
      pool-name: FaltaUnoHikariCP

  jpa:
    hibernate:
      ddl-auto: none  # ✅ Flyway maneja el schema
    properties:
      hibernate:
        default_schema: public
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
          lob:
            non_contextual_creation: true    # ✅ evita problemas con LOBs (única vez)
        order_inserts: true
        order_updates: true
    show-sql: false  # ✅ Solo en desarrollo
    open-in-view: false  # ✅ Mejor práctica

  redis:
    host: ${SPRING_REDIS_HOST:localhost}
    port: ${SPRING_REDIS_PORT:6379}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 2

  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST:localhost}
    port: ${SPRING_RABBITMQ_PORT:5672}
    username: ${SPRING_RABBITMQ_USERNAME:guest}
    password: ${SPRING_RABBITMQ_PASSWORD:guest}
    connection-timeout: 5s
    listener:
      simple:
        acknowledge-mode: auto
        missing-queues-fatal: false
        default-requeue-rejected: false
        retry:
          enabled: true
          initial-interval: 1000ms
          max-attempts: 3

  flyway:
    enabled: true
    baseline-on-migrate: false
    validate-on-migrate: true
    locations: classpath:db/migration
    table: flyway_schema_history

  cache:
    type: redis
    redis:
      cache-null-values: false
      time-to-live: 600s  # 10 minutos (con unidad)

  data:
    redis:
      repositories:
        enabled: false

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - openid
              - email
              - profile
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
        provider:
          google:
            issuer-uri: https://accounts.google.com

  # ✅ Subida de archivos
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  # Email configuration (Opcional - Configurar cuando se necesite)
  # Para habilitar: descomentar variables MAIL_* en .env
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
    default-encoding: UTF-8

server:
  port: ${SERVER_PORT:8080}
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
  connection-timeout: 30s                 # ✅ correcta (Spring Boot usa esta)
  forward-headers-strategy: framework     # ✅ Detectar HTTPS detrás de proxy (Cloud Run)
  tomcat:
    keep-alive-timeout: 60s               # ✅ mayor que el proxy para evitar EOFs
    max-connections: 10000
    accept-count: 1000
    threads:
      max: 200
      min-spare: 10
    remoteip:                             # ✅ Configuración para Cloud Run
      remote-ip-header: x-forwarded-for
      protocol-header: x-forwarded-proto
      protocol-header-https-value: https

management:
  endpoints:
    web:
      exposure:
        include: health  # Solo health público, resto requiere autenticación
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
      group:                                  # ✅ readiness/liveness claros
        readiness:
          include: db,redis,rabbit,readinessState
        liveness:
          include: livenessState
  health:
    mail:
      enabled: false  # Desactivar health check de mail
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true

# JWT Configuration
# ⚠️ CRÍTICO: JWT_SECRET debe ser configurada como variable de entorno
# Generar con: openssl rand -base64 64
jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION:86400000}  # 24 horas

# Frontend URL for CORS (si lo usás en tu config de CORS)
frontend:
  url: ${FRONTEND_URL:http://localhost:3000}

# Logging (niveles sensatos; menos ruido en Redis/Tomcat/Netty/Hibernate binder)
logging:
  level:
    root: INFO
    uy.um.faltauno: DEBUG
    org.springframework.security: INFO
    org.springframework.web: INFO
    org.hibernate: WARN
    org.hibernate.SQL: INFO
    org.hibernate.type.descriptor.sql.BasicBinder: INFO
    io.lettuce.core: WARN
    io.netty: WARN
    org.apache.coyote.http11: WARN
    org.apache.tomcat.util.net: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# ✅ Profiles
---
spring:
  config:
    activate:
      on-profile: dev

logging:
  level:
    root: DEBUG
    uy.um.faltauno: DEBUG
    org.springframework.security: DEBUG

---
spring:
  config:
    activate:
      on-profile: prod