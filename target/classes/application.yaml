spring:
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

  redis:
    host: ${SPRING_REDIS_HOST:redis}
    port: ${SPRING_REDIS_PORT:6379}

  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST:rabbitmq}
    port: ${SPRING_RABBITMQ_PORT:5672}
    username: ${SPRING_RABBITMQ_USERNAME:guest}
    password: ${SPRING_RABBITMQ_PASSWORD:guest}

  cache:
    type: redis

  data:
    redis:
      repositories.enabled: false

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v2/userinfo

server:
  port: ${SERVER_PORT:8080}

management:
  endpoints:
    web:
      exposure:
        include: "*"

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:mi_clave_super_segura_que_debe_ser_al_menos_256_bits_para_hs256_seguridad_maxima_2024}
  expiration: ${JWT_EXPIRATION:86400000} # 24 horas en milisegundos

# Frontend URL for CORS
frontend:
  url: ${FRONTEND_URL:http://localhost:3000}

logging:
  level:
    uy.um.faltauno.config.JwtAuthenticationFilter: DEBUG
    uy.um.faltauno.config.JwtUtil: DEBUG
    org.springframework.security: DEBUG